{"./":{"url":"./","title":"序言","keywords":"","body":"前言 本书记录本人学习kubernetes的经历，还正在路上，希望能带大家由浅入深、全面系统地学习kubernetes，节约大家的时间，少走弯路，从入门到精通。 kubernetes 很复杂，学习门槛较高，市面上的学习资料往往很难让小白快速入门，需要有一定的基础才能弄懂很多操作和概念。这本书正是为了让大多数人能快速入门甚至精通kubernetes而设计的，用接地气的方式在合适的阶段讲合适的东西，不会一下子讲的很全面，因为你也不可能一下子记住那么多东西，还会拖慢你的学习速度。总之，你只需要按照本书的思路走，就可以循序渐进的掌握kubernetes。 Copyright © imroc.io 2018 all right reserved，powered by GitbookUpdated: 2018-01-13 17:18:20 "},"introduce-kubernetes.html":{"url":"introduce-kubernetes.html","title":"kubernetes简介","keywords":"","body":"什么是Kubernetes 简单来说就是一个容器的集群管理平台，你程序所需要的计算资源不再受单机资源的约束，可以讲整个集群拥有的计算资源看成一块云，资源不够用再加节点，动态伸缩你的程序运行的数量就可以了。它不仅仅是集群管理，还可以让你只需要关注自己程序的逻辑，而服务发现、负载均衡、自动伸缩、滚动升级等这些你都不需要关心，它也需要不关心你用的什么语言，不用侵入你的代码就能帮你完成这些，甚至它还有办法在你程序有bug的情况下尽量让你的程序正常提供服务。 kubernetes也是云原生的核心，整个生态飞速发展，日益壮大。服务网格(Service Mesh) 的出现如虎添翼，可以轻松实现和管理微服务，服务治理框架可能也将不再需要。 Kubernetes架构 为了更容易理解kubernetes架构，我先画了个简单版的架构图，屏蔽了很多细节很容易看出来，kubernetes是用master来管理其它Node（工作负载的节点），当然master自身也是可以安装成Node的。 核心组件说明： apiserver 提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制； etcd 保存了整个集群的状态； controller manager 负责维护集群的状态，比如故障检测、自动扩展、滚动更新等； scheduler 负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上； kubelet 负责维护容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理； kube-proxy 负责为Service提供cluster内部的服务发现和负载均衡； Copyright © imroc.io 2018 all right reserved，powered by GitbookUpdated: 2018-01-13 17:18:20 "},"install-kubernetes/install-kubernetes.html":{"url":"install-kubernetes/install-kubernetes.html","title":"说明","keywords":"","body":"安装说明 在前期建议先把kubernetes搭起来，后面再慢慢深入原理与概念，不然纸上谈兵最终会导致学习速度和效果都不好。 Copyright © imroc.io 2018 all right reserved，powered by GitbookUpdated: 2018-01-13 17:18:13 "},"install-kubernetes/install-kubernetes-1.9-on-centos7.html":{"url":"install-kubernetes/install-kubernetes-1.9-on-centos7.html","title":"在CentOS 7上部署Kubernetes v1.9","keywords":"","body":"在CentOS 7 上安装Kubernetes v1.9 Copyright © imroc.io 2018 all right reserved，powered by GitbookUpdated: 2018-01-13 17:18:13 "}}