{"./":{"url":"./","title":"序言","keywords":"","body":"前言 本书记录本人学习kubernetes的经历，还正在路上，希望能带大家由浅入深、全面系统地学习kubernetes，节约大家的时间，少走弯路，从入门到精通。 kubernetes 很复杂，学习门槛较高，市面上的学习资料往往很难让小白快速入门，需要有一定的基础才能弄懂很多操作和概念。这本书正是为了让大多数人能快速入门甚至精通kubernetes而设计的，用接地气的方式在合适的阶段讲合适的东西，不会一下子讲的很全面，因为你也不可能一下子记住那么多东西，还会拖慢你的学习速度。总之，你只需要按照本书的思路走，就可以循序渐进的掌握kubernetes。 学习思路 kubernetes 本书是个非常复杂、非常灵活的东西，要真正会用它不能只是照搬网上搜索的操作步骤，一定要弄明白它的原理和概念，不然遇到问题就只能各种搜索，可能还解决不了。本书会按照下面的思路来讲： 简单介绍在安装 kubernetes 之前需要了解的基础概念和原理，为后面的安装铺路，让你看懂每一步在做什么和为什么这么做 教你如何安装 kubernetes （了解前面的基础马上装，不然学后面的概念和操作就纸上谈兵了） 把 kubernetes 涉及到的概念详细的列出来作为参考（这部分不需要一下子看完，后面用到的时候来翻下就行） 各种插件的安装与使用 Copyright © imroc.io 2018 all right reserved，powered by GitbookUpdated: 2018-01-22 10:26:30 "},"intro/introduce-kubernetes.html":{"url":"intro/introduce-kubernetes.html","title":"kubernetes简介","keywords":"","body":"Kubernetes 简介 什么是Kubernetes 简单来说就是一个容器的集群管理平台，你程序所需要的计算资源不再受单机资源的约束，可以将整个集群拥有的计算资源看成一块云，资源不够用就只需要增加机器，动态伸缩你的程序运行的数量就可以了。它不仅仅是集群管理，还可以让你只需要关注自己程序的逻辑，而服务发现、负载均衡、自动伸缩、滚动升级等这些你都不需要关心，它也不需要关心你用的什么语言，不侵入你的代码就能帮你完成这些，甚至它还有办法在你程序有bug的情况下尽量让你的程序正常提供服务。 kubernetes也是云原生的核心，整个生态飞速发展，日益壮大。服务网格(Service Mesh) 的出现如虎添翼，可以轻松实现和管理微服务，服务治理框架可能也将不再需要。 Kubernetes架构 为了更容易理解kubernetes架构，我先画了个简单版的架构图，屏蔽了很多细节 很容易看出来，kubernetes是用master来管理其它Node（工作负载的节点），当然master自身也是可以安装成Node的。 核心组件说明： apiserver 提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制； etcd 保存了整个集群的状态； controller manager 负责维护集群的状态，比如故障检测、自动扩展、滚动更新等； scheduler 负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上； kubelet 负责维护容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理； kube-proxy 负责为Service提供cluster内部的服务发现和负载均衡； 如何操作集群 操作集群方式有多种，它们的原理都是调用 API Server 的接口。 通过 kubectl 命令行工具 给集群装 dashboard 插件，通过网页可视化操作 用 Rancher 来管理 kubernetes，功能更加丰富 利用 SDK 写程序来做一些集群操作自动化 不管怎样，最终都要和 API Server 通信，都需要经过访问控制校验，kubernetes 主要利用 RBAC (基于角色的访问控制）来做的，接下来会将。 Copyright © imroc.io 2018 all right reserved，powered by GitbookUpdated: 2018-01-22 10:26:30 "},"intro/kubernetes-authentication.html":{"url":"intro/kubernetes-authentication.html","title":"kubernetes权限控制","keywords":"","body":"Kubernetes 权限控制 \bKubernetes 的权限控制这块是\b理解其搭建\b过程中比较复杂也是比较重要的部分，这里先简单介绍下相关概念，为后面打下基础。 Namespace Kubernetes 集群中可包含多个 namespace，它们在逻辑上相互隔离，比如测试和生产如果在同一个 Kubernetes 集群上，可以用 namaspace 将它们隔离开，互不干扰。当然也可以通过一些方式跨 namespace 访问和操作，前提是分配了足够的权限。 RBAC——基于角色的访问控制 Kubernetes 的权限控制主要使用基于角色的访问控制（Role-Based Access Control, 即”RBAC”）\b，简单来说，就是不管是\b集群管理员还是集群中的程序，把它们都看用户，它们要想对集群进行访问或操作，就需要相应的权限，权限通过角色\b来代表，每个角色可以被赋予一组权限，角色可以绑定到\b用户上，绑定之后用户就拥有了相应的权限。 用户与用户组 Kubernetes 集群中包含两类用户： \bUser : \b限制集群管理员的权限。比如刚开始学习我们可以都用最高管理员权限，可以在集群中任何 namespace 下进行访问和各种操作。到了生产环境，如果集群比较大，操作的人比较多，管理员权限的分配可能就需要更加细化了。 \bService Account : 限制集群\b中运行的程序的权限。比如 Kubernetes 自身的组件或一些插件，往往它们都需要对整个集群的一些状态和数据进行读写操作，就需要相应的权限。 用户组： Group : 用于给一组\b用户赋予相同的权限。 角色 角色用来代表一组权限，在 Kubernetes 中有两类角色： Role : 代表某个 namaspace 下的一组权限。 ClusterRole : 代表整个集群范围内的一组权限。 角色绑定 可以给某个用户或某个用户组分配一组权限，通过角色绑定来实现。分两类： RoleBinding : 绑定的权限只作用于某个 namespace 下。 ClusterRoleBinding : 绑定的权限作用于整个集群。 Copyright © imroc.io 2018 all right reserved，powered by GitbookUpdated: 2018-01-22 11:25:15 "},"install-kubernetes/install-kubernetes.html":{"url":"install-kubernetes/install-kubernetes.html","title":"概述","keywords":"","body":"安装说明 在前期建议先把kubernetes搭起来，后面再慢慢深入原理与概念，不然纸上谈兵最终会导致学习速度和效果都不好。 Copyright © imroc.io 2018 all right reserved，powered by GitbookUpdated: 2018-01-22 10:26:30 "},"install-kubernetes/install-kubernetes-1.9-on-centos7.html":{"url":"install-kubernetes/install-kubernetes-1.9-on-centos7.html","title":"在CentOS 7上部署Kubernetes v1.9","keywords":"","body":"在CentOS 7 上安装Kubernetes v1.9 Copyright © imroc.io 2018 all right reserved，powered by GitbookUpdated: 2018-01-22 10:26:30 "}}